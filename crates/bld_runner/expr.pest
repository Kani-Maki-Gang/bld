//
// Defining operators
//
EqualsOperator = @{ " "* ~ "==" ~ " "* }
GreaterOperator = @{ " "* ~ ">" ~ " "* }
GreaterEqualsOperator = @{ " "* ~ ">=" ~ " "* }
LessOperator = @{ " "* ~ "<" ~ " "* }
LessEqualsOperator = @{ " "* ~ "<=" ~ " "* }
AndOperator = @{ " "* ~ "&&" ~ " "* }
OrOperator = @{ " "* ~ "||" ~ " "* }

Operator = {
    EqualsOperator
    | GreaterOperator
    | GreaterEqualsOperator
    | LessOperator
    | LessEqualsOperator
    | AndOperator
    | OrOperator
}

//
// Defining symbols
//
Number = ${
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

Boolean = @{ "true" | "false" }

Char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
StringInner = @{ Char* }
String = ${ "\"" ~ StringInner ~ "\"" | "'" ~ StringInner ~ "'" }

ObjectChar = @{ 'a'..'z' | 'A'..'Z' | "_" | "-" | "(" | ")" | ASCII_NONZERO_DIGIT | ASCII_DIGIT }
ObjectPart = @{ ObjectChar+ }
Object = ${
    ObjectPart ~ ("." ~ ObjectPart)*
}

Symbol = { Boolean | Number | String | Object }

//
// Defining expressions
//
Equals = { Symbol ~ EqualsOperator ~ Symbol }
Greater = { Symbol ~ GreaterOperator ~ Symbol }
GreaterEquals = { Symbol ~ GreaterEqualsOperator ~ Symbol }
Less = { Symbol ~ LessOperator ~ Symbol }
LessEquals = { Symbol ~ LessEqualsOperator ~ Symbol }

ExpressionInner = { Equals | Greater | GreaterEquals | Less | LessEquals | Symbol }
Expression = { "(" ~ " "* ~ ExpressionInner ~ " "* ~ ")" | ExpressionInner }

LogicalExpression = { Expression ~ (AndOperator | OrOperator) ~ Expression ~ (LogicalExpression)* }

//
// Defining full expression syntax
//
Full = { "${{" ~ " "* ~ (LogicalExpression | Expression)* ~ " "* ~ "}}" }

