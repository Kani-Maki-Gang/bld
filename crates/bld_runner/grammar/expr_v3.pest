//
// Defining operators
//
EqualsOperator = @{ " "* ~ "==" ~ " "* }
NotEqualsOperator = @{ " "* ~ "!=" ~ " "* }
GreaterOperator = @{ " "* ~ ">" ~ " "* }
GreaterEqualsOperator = @{ " "* ~ ">=" ~ " "* }
LessOperator = @{ " "* ~ "<" ~ " "* }
LessEqualsOperator = @{ " "* ~ "<=" ~ " "* }
AndOperator = @{ " "* ~ "&&" ~ " "* }
OrOperator = @{ " "* ~ "||" ~ " "* }

Operator = {
    EqualsOperator
    | NotEqualsOperator
    | GreaterOperator
    | GreaterEqualsOperator
    | LessOperator
    | LessEqualsOperator
    | AndOperator
    | OrOperator
}

//
// Defining symbols
//
Number = ${
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

Boolean = @{ "true" | "false" }

String = ${
    ("\"" | "'")
    ~ (
        !("\"" | "\\") ~ ANY
        | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
        | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
    )*
    ~ ("\"" | "'")
}

ObjectPart = @{ ('a'..'z' | 'A'..'Z' | "_" | "-" | "(" | ")" | ASCII_NONZERO_DIGIT | ASCII_DIGIT)+ }
Object = ${
    ObjectPart ~ ("." ~ ObjectPart)*
}

Symbol = { Boolean | Number | String | Object }

//
// Defining expressions
//
Equals = { Symbol ~ EqualsOperator ~ Symbol }
NotEquals = { Symbol ~ NotEqualsOperator ~ Symbol }
Greater = { Symbol ~ GreaterOperator ~ Symbol }
GreaterEquals = { Symbol ~ GreaterEqualsOperator ~ Symbol }
Less = { Symbol ~ LessOperator ~ Symbol }
LessEquals = { Symbol ~ LessEqualsOperator ~ Symbol }

ExpressionInner = { Equals | NotEquals | Greater | GreaterEquals | Less | LessEquals | Symbol }
Expression = { ("(" ~ " "* ~ ExpressionInner ~ " "* ~ ")") | ExpressionInner }

LogicalExpression = {  Expression ~ ((AndOperator | OrOperator) ~ Expression)+ }

//
// Define full grammar
//
Full = ${ "${{" ~ " "* ~ (LogicalExpression | Expression) ~ " "* ~ "}}" }
